#=================================================
# Description: Build V2X2 using GitHub Actions
# Lisence: MPL-2.0
# Peace and joy
#=================================================

name: Actions-V2X2

on:
  workflow_dispatch:
  #schedule:
  # - cron: 0 16 * * *

env:
  SOURCE_URL: https://github.com/XTLS/Xray-core.git
  SOURCE_BRANCH: main
  TAG: V2X2-Bin
  DIY_SH: custom.sh
  BINARY_RELEASE_UPLOAD: true
  GO_VERSION: 1.20

jobs:
  Build_v2x2_binary:
    runs-on: ubuntu-latest

    outputs:
      V2X2_ROOT_PATH: ${{ steps.clone.outputs.V2X2_ROOT_PATH }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_URL: ${{ steps.env.outputs.SOURCE_URL }}
      SOURCE_BRANCH: ${{ steps.env.outputs.SOURCE_BRANCH }}
      TAG: ${{ steps.env.outputs.TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install curl wget git
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          docker image prune -a -f
          sudo mkdir -p workspace

      - name: Clone Source Code
        id: clone
        run: |
          df -hT $PWD
          git clone $SOURCE_URL -b $SOURCE_BRANCH workspace/v2x2
          cd workspace/v2x2
          echo "V2X2_ROOT_PATH=$PWD" >> $GITHUB_ENV
          echo "::set-output name=V2X2_ROOT_PATH::$(echo $PWD)"

      - name: Generate Variables
        id: env
        run: |
          export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
          echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "::set-output name=CURRENT_BRANCH::$(echo $CURRENT_BRANCH)"

      - name: Load custom file
        run: |
          cat custom.sh >> $V2X2_ROOT_PATH/Xray-core/core/core.go
          cd $V2X2_ROOT_PATH

      - name: Setup-GO
        uses: actions/setup-go@main
        with:
          go-version: '$GO_VERSION'
          check-latest: true

      - name: Get project dependencies
        run: go mod download
      
      - name: Build Custom V2X2
        run: |
          go build -o server.js -trimpath -ldflags "-s -w -buildid=" ./main
      
      - name: Compress Binary
        run: |
          cd $V2X2_ROOT_PATH
          zip -r -9 $TAG.zip server.js

      - name: Print disk usage
        run: |
          df -ht $V2X2_ROOT_PATH
      
      - name: Upload project
        uses: actions/upload-artifact@main
        with:
          name: v2x2
          path: ${{ env.$V2X2_ROOT_PATH }}/${{ env.$TAG }}.zip
      
  Upload:
    needs: [Build_v2x2_binary]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@main
      
      - name: Restore Variables
        run: |
          echo "V2X2_ROOT_PATH=$(echo '${{needs.Build_v2x2_binary.outputs.V2X2_ROOT_PATH}}')" >> $GITHUB_ENV
          echo "CURRENT_BRANCH=$(echo '${{needs.Build_v2x2_binary.outputs.CURRENT_BRANCH}}')" >> $GITHUB_ENV
          echo "TAG=$(echo '${{needs.Build_v2x2_binary.outputs.TAG}}')" >> $GITHUB_ENV

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install tar zip unzip
      
      - name: Download Bin Archive
        uses: actions/download-artifact@main
        with:
          name: v2x2
          path: ${{ env.V2X2_ROOT_PATH }}
      
      - name: Decompress Bin Archive
        run: |
          cd $V2X2_ROOT_PATH
          unzip $TAG.zip

      - name: Organize Files
        run: |
          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          cd $V2X2_ROOT_PATH
          ls -alF $V2X2_ROOT_PATH
          df -hT $PWD

      - name: Delete Old Firmware Assets
        run: |
          if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
          uses: mknejp/delete-release-assets@v1
          with:
            token: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ env.TAG }}
            fail-if-no-assets: false
            fail-if-no-release: false
            assets: "*"

      - name: Deploy Files To Release
        uses: ncipollo/release-action@main
        if: env.BINARY_RELEASE_UPLOAD == 'true'
        with:
          name: v2x2-${{ env.$TAG }}
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.$TAG }}
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.$V2X2_ROOT_PATH }}/${{ env.TAG }}/*
